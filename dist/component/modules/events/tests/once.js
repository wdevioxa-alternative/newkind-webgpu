var common=require("./common"),assert=require("assert"),EventEmitter=require("../"),e=new EventEmitter;function remove(){assert.fail("once->foo should not be emitted")}e.once("hello",common.mustCall()),e.emit("hello","a","b"),e.emit("hello","a","b"),e.emit("hello","a","b"),e.emit("hello","a","b"),e.once("foo",remove),e.removeListener("foo",remove),e.emit("foo"),e.once("e",common.mustCall((function(){e.emit("e")}))),e.once("e",common.mustCall()),e.emit("e"),assert.throws((function(){(new EventEmitter).once("foo",null)}),/^TypeError: The "listener" argument must be of type Function. Received type object$/);for(var maxArgs=4,i=0;i<=maxArgs;++i){for(var ee=new EventEmitter,args=["foo"],j=0;j<i;++j)args.push(j);ee.once("foo",common.mustCall((function(){var e=Array.prototype.slice.call(arguments),o=args.slice(1);assert.ok(Array.isArray(e)),assert.strictEqual(e.length,o.length);for(var t=0;t<e.length;t++){var r=e[t];assert.strictEqual(r,o[t])}}))),EventEmitter.prototype.emit.apply(ee,args)}
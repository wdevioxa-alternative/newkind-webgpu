import FreeQueue from"./lib/free-queue.js";import GPUProcessor from"./gpu-processor.js";import{FRAME_SIZE}from"./constants.js";let inputQueue=null,outputQueue=null,atomicState=null,gpuProcessor=null,inputBuffer=null,irArray=null,sampleRate=null,lastCallback=0,averageTimeSpent=0,timeElapsed=0,runningAverageFactor=1;const initialize=async e=>{({inputQueue,outputQueue,atomicState,irArray,sampleRate}=e),Object.setPrototypeOf(inputQueue,FreeQueue.prototype),Object.setPrototypeOf(outputQueue,FreeQueue.prototype),inputBuffer=new Float32Array(FRAME_SIZE),gpuProcessor=new GPUProcessor,gpuProcessor.setIRArray(irArray),await gpuProcessor.initialize(),runningAverageFactor=sampleRate/FRAME_SIZE,console.log("[worker.js] initialize()")},process=async()=>{if(!inputQueue.pull([inputBuffer],FRAME_SIZE))return void console.error("[worker.js] Pulling from inputQueue failed.");const e=await gpuProcessor.processBypass(inputBuffer);outputQueue.push([e],FRAME_SIZE)||console.error("[worker.js] Pushing to outputQueue failed.")};self.onmessage=async e=>{if(console.log("[worker.js] onmessage: "+e.data.type),"init"===e.data.type){for(await initialize(e.data.data);;)if("ok"===Atomics.wait(atomicState,0,1)){const e=performance.now(),t=e-lastCallback;lastCallback=e,timeElapsed+=t,await process();const r=performance.now()-e;averageTimeSpent-=averageTimeSpent/runningAverageFactor,averageTimeSpent+=r/runningAverageFactor,timeElapsed>=1e3&&(console.log(`[worker.js] process() = ${r.toFixed(3)}ms : avg = ${averageTimeSpent.toFixed(3)}ms : callback interval = ${t.toFixed(3)}ms`),timeElapsed-=1e3),Atomics.store(atomicState,0,0)}}else console.error(`[worker.js] Invalid message type: ${e.data.type}`)},console.log("[worker.js] loaded.");
import { IRenderDimensions, IRenderLayer } from 'browser/renderer/Types';
import { ICellData } from 'common/Types';
import { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';
import { IColorSet } from 'browser/Types';
import { CellData } from 'common/buffer/CellData';
import { IBufferService, IOptionsService } from 'common/services/Services';
export declare abstract class BaseRenderLayer implements IRenderLayer {
    private _container;
    private _alpha;
    protected _colors: IColorSet;
    private _rendererId;
    protected readonly _bufferService: IBufferService;
    protected readonly _optionsService: IOptionsService;
    private _canvas;
    protected _ctx: CanvasRenderingContext2D;
    private _scaledCharWidth;
    private _scaledCharHeight;
    private _scaledCellWidth;
    private _scaledCellHeight;
    private _scaledCharLeft;
    private _scaledCharTop;
    protected _charAtlas: BaseCharAtlas | undefined;
    private _currentGlyphIdentifier;
    constructor(_container: HTMLElement, id: string, zIndex: number, _alpha: boolean, _colors: IColorSet, _rendererId: number, _bufferService: IBufferService, _optionsService: IOptionsService);
    dispose(): void;
    private _initCanvas;
    onOptionsChanged(): void;
    onBlur(): void;
    onFocus(): void;
    onCursorMove(): void;
    onGridChanged(startRow: number, endRow: number): void;
    onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode?: boolean): void;
    setColors(colorSet: IColorSet): void;
    protected _setTransparency(alpha: boolean): void;
    private _refreshCharAtlas;
    resize(dim: IRenderDimensions): void;
    abstract reset(): void;
    protected _fillCells(x: number, y: number, width: number, height: number): void;
    protected _fillBottomLineAtCells(x: number, y: number, width?: number): void;
    protected _fillLeftLineAtCell(x: number, y: number, width: number): void;
    protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void;
    protected _clearAll(): void;
    protected _clearCells(x: number, y: number, width: number, height: number): void;
    protected _fillCharTrueColor(cell: CellData, x: number, y: number): void;
    protected _drawChars(cell: ICellData, x: number, y: number): void;
    private _drawUncachedChars;
    private _clipRow;
    protected _getFont(isBold: boolean, isItalic: boolean): string;
    private _getContrastColor;
    private _resolveBackgroundRgba;
    private _resolveForegroundRgba;
}
//# sourceMappingURL=BaseRenderLayer.d.ts.map
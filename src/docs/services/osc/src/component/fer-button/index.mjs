import { init, onload } from '../../this/index.mjs'

const COMPONENT = 'fer-button'
const INDEX =  class extends HTMLElement {
  static get observedAttributes() {
    return ['disabled', 'open'];
  }
  _doRender() {
    if(this._state.tree) {
      console.log('     üîµ RENDER')
    }
  }

  getState(path) {
    return this._state[path];
  }

  setState(path, value) {
    if(!this._state.hasOwnProperty(path)) {
      alert(`–Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ ${path} –≤ —Å—Ç–µ–π—Ç–µ`)
      console.assert(false, `–Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ ${path} –≤ —Å—Ç–µ–π—Ç–µ`, {
        state: this._state
      })
      
    } else {
      if (this._state[path] !== value) {
        this._state[path] = value;
        this._doRender();
      }
    }
  }

  set open(val) {
    if (val) {
      this.setAttribute('open', '');
      this.removeAttribute('style')
    } else {
      this.removeAttribute('open');
      this.style.display = 'none'
    }
  }

  get open() {
    return this.hasAttribute('open');
  }

  set disabled(val) {
    if (val) {
      this.setAttribute('disabled', '');
    } else {
      this.removeAttribute('disabled');
    }
  }

  get disabled() {
    return this.hasAttribute('disabled');
  }


  constructor () {
    super()
    this.controller = {}
    this._isOnload = false;
    this._state = { };
    this._doRender = this._doRender.bind(this);
    init(this, {
      css: {
        shadow: this.dataset.cssShadow ? [this.dataset.cssShadow]: undefined
      }
    }).then(self => (self._isOnload = true)).catch(error => console.warn('error', error))
  }
  connectedCallback() {
    onload(this)
      .then(async (self) => {
        const { actions } = await import(`/services/${self.dataset.servicesPath}/src/component/${COMPONENT}/actions/index.mjs`)
        let { controller } = await import(`/services/${self.dataset.servicesPath}/src/component/${COMPONENT}/controller/index.mjs`)
        self.controller = await controller(self, await actions(self))
        await self.controller.addEventListener.init()
        await self.controller.addTaskListener.init()
      })
      .catch(e => console.error('error', e))
  }
  disconnectedCallback() {
    this.controller.addEventListener.terminate()
    this.controller.addTaskListener.terminate()
    console.log(`     üî¥ COMPONENTS ${this.tagName} disconnected`)
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (this.disabled) {
      this.setAttribute('tabindex', '-1');
      this.setAttribute('aria-disabled', 'true');
    } else {
      this.setAttribute('tabindex', '0');
      this.setAttribute('aria-disabled', 'false');
    }
  }
}

if(customElements.get(COMPONENT) === undefined) { customElements.define(COMPONENT, INDEX ) };

export default {
  component: COMPONENT,
  description: '–®–∞–±–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–¥–µ–ª–∞–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ css —Ç–µ–º–ø–ª–µ–π—Ç–∞',
  "data-": {
    id: '–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏',
    type: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —á—Ç–æ –±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫ –∫ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è",
    switchoff: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–æ–±—ã active –∫–ª–∞—Å—Å —É–¥–∞–ª—è–ª—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É",
    "css-shadow": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è css –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—É—Ç—å –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º `./component/${self.tagName.toLowerCase()}/views/css/${self.dataset.cssShadow}.shadow.css``"
  },
  actions: {
    "fer-button-in": "—Å–æ–±—ã—Ç–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –∫–æ–º–º–ø–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –∫–Ω–æ–ø–∫—É. –ó–Ω–∞—á–µ–Ω–∏—è disable/enable –í—ã–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–∫–ª—é—á–∞—é—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ–º–µ –∞–∫—Ç–∏–≤–Ω–æ–π"
  }
}
